# musl-cross-make meta makefile

# built to support these architectures:
#  aarch64-linux-musl
#  arm-linux-musleabihf
#  i686-linux-musl
#  x86_64-linux-musl

# prereqs:
#  bash (gnu)
#  bzip2 (busybox should be fine)
#  curl (with ssl/tls support)
#  gcc/g++
#  ln (busybox should be fine)
#  make (gnu)
#  sort (busybox should be fine)
#  tar (busybox should be fine)
#  wget (with ssl/tls support)

# projects:
#  musl-cross-make: https://github.com/richfelker/musl-cross-make
#  crosware: https://github.com/ryanwoodsmall/crosware
#  chralpine (if you can't use docker): https://github.com/ryanwoodsmall/shell-ish/blob/master/bin/chralpine.sh

# install alpine prereqs:
#  XXX - need to figure out man page generation requirements, is groff enough?
#  apk update ; apk add git make gcc g++ make curl wget bash groff texinfo gettext gettext-static gettext-libs gettext-dev

# example usage with bash fd substitution:
#  git clone https://github.com/richfelker/musl-cross-make.git
#  cd musl-cross-make
#  make -f <(curl -kLs https://raw.githubusercontent.com/ryanwoodsmall/musl-misc/master/musl-cross-make-confs/Makefile.arch_indep)
# command i normally use:
#  ( time ( make -f <(curl -kLs https://raw.githubusercontent.com/ryanwoodsmall/musl-misc/master/musl-cross-make-confs/Makefile.arch_indep) ) ) >/tmp/musl-cross-make.out 2>&1

# stages:
#  clean everything up
#  generate configs
#  copy in shared config.mak
#  build normal "shared" compiler with system compiler
#  install shared compiler
#  clean again
#  copy in static config.mak
#  build static compiler
#  install static compiler
#  create static compiler symlinks
#  archive and compress static compiler

# XXX - error on unset var example
#       ifndef TEST_VAR
#       $(error TEST_VAR not set)
#       endif

# XXX - look at .ONESHELL
#       https://www.gnu.org/software/make/manual/html_node/One-Shell.html
#     - add optional "test -e config.mak.custom" & append to config.mak 

# XXX - need static and shared config
#       SHARED_CONFIG
#       STATIC_CONFIG
#     - bundle into COMMON_CONFIG or GCC_CONFIG?
#     - inherit from env with += $(...)

#
# tuning
#   - i want these to be able to build/run code for the big four architectures
#   - ... and elsewhere
#

# ARM 32-bit flags
#   - mostly want to stay compatible with armv6/vfp/hard-float (Pi 1, Pi zero)
#   - gcc flags will be something like "--with-arch=armv6 --with-float=hard --with-fpu=vfp"
#   - vfp vs vfpv2?
#   - rpi1 and pi0 arch are arm1176jzf-s, flags should possibly be:
#     -march=armv6kz
#     -mcpu=arm1176jzf-s
#     -mtune=arm1176jzf-s
#     -mfpu=vfp
#     -mfloat-abi=hard
#   - should work as expected on ARMv7-A/Cortex-A series
#   - links:
#     - https://wiki.musl-libc.org/getting-started.html#Notes_on_ARM_Float_Mode
#     - https://raspberrypi.stackexchange.com/questions/2046/which-cpu-flags-are-suitable-for-gcc-on-raspberry-pi
#     - https://www.raspberrypi.org/forums/viewtopic.php?t=11629
#     - https://github.com/richfelker/musl-cross-make/issues/34
#     - https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html

# ARM 64-bit
#   - fewer options here
#   - probably tune to cortex-a53 to be safe-ish
#   - cortex-a35?
#     -march=armv8{.1}-a{+[no]{crc,crypto,fp,simd,lse}}
#     -mtune={generic,cortex-a{35,53,57,72}}

# intel 32-bit
#   - lowest common denominator is geode, like an i486 w/mmx?
#   - musl requires i486+ (or cmpxchg emulation)
#     -march=... i486? i586/pentium? i686/pentium-pro? pentium-mmx? geode?
#     -mtune=... generic (default, i686)? pentium-mmx? geode?

# intel 64-bit
#   - lcd is probably atom
#   - bonnell or silvermont?

# shared/static
#   - need to figure out true static-only
#   - libc.so is only shared lib, left in place
#   - ld-musl-${arch}.so symlinks fixed to point to full path to libc.so
#   - patch sets custom ld.so for each arch in its triplet directory
#     - sets custom MUSL_DYNAMIC_LINKER/MUSL_DYNAMIC_LINKER32/MUSL_DYNAMIC_LINKER64 with full path
#     - applied only during final static compilation step

# XXX - add a file identifying the git commit of musl-cross-make

# basic stuff: shell, timestamp and architecture
SHELL        := /bin/bash
ifeq ($(TS),)
TS           := $(shell date '+%Y%m%d%H%M')
endif
ARCH         := $(shell uname -m | sed 's/^\(arm\).*/\1/g')

# versions
GCCVER       := 6.4.0
BINUTILSVER  := 2.27

# form our triplet, arm needs to be hardware float
TRIPLET_BASE := $(ARCH)-linux-musl
TRIPLET       =
ifeq ($(ARCH),arm)
	TRIPLET=$(TRIPLET_BASE)eabihf
else
	TRIPLET=$(TRIPLET_BASE)
endif

# and cpu-specific stuff
ARCH_GCC_CONFIG =
ifeq ($(ARCH),arm)
	# hard-float only, default arch to and tune for rpi on arm 32-bit
	ARCH_GCC_CONFIG='--with-arch=armv6kz --with-tune=arm1176jzf-s --with-float=hard --with-fpu=vfp'
endif

# build out paths to expand into
TMPSHAREDDIR := $(PWD)/shared-build
CWTOP        := /usr/local/crosware
MUSLTOP      := $(CWTOP)/software/statictoolchain
CWTCPREFIX   := $(TS)-
CWSTATICINST := $(MUSLTOP)/$(CWTCPREFIX)$(TRIPLET)
CWARCHDIR    := $(CWSTATICINST)/$(TRIPLET)
CWARCHLIBDIR := $(CWARCHDIR)/lib
CWCURRENT    := $(MUSLTOP)/current
CWCURRENTLD  := $(CWCURRENT)/$(TRIPLET)/lib/ld.so

# our final archive will be dumped to /tmp
CWSTATICDIR  := $(shell basename $(CWSTATICINST))
CWSTATICTAR  := /tmp/$(CWSTATICDIR).tar
CWSTATICBZ2  := $(CWSTATICTAR).bz2

# and add our temp shared build to our path
EXPATH       := $(TMPSHAREDDIR)/bin
PATH         := $(EXPATH):$(PATH)
export PATH

# musl-cross-make stuff
CONFMAK      := config.mak
CONFMAKDIST  := $(CONFMAK).dist

.PHONY: all prereqs build_shared build_static cleanconfs create_symlinks archive_compiler get_patches remove_patches

all: prereqs cleanconfs config.mak.common config.mak.shared config.mak.static build_shared build_static create_symlinks archive_compiler

# clean up configs everytime we run
cleanconfs:
	echo 'cleaning configs'
	rm -f $(CONFMAK).common $(CONFMAK).shared $(CONFMAK).static

# building on alpine in a miniroot, we may not have everything
# we need to check we're not using busybox wget too - no ssl by default
prereqs:
	echo 'checking prerequisites'
	which bzip2
	bash --version | egrep -qi '^GNU bash'
	curl --version | egrep -qi '(tls|ssl)'
	gcc  --version | egrep -qi '^gcc'
	g++  --version | egrep -qi '^g\+\+'
	make --version | egrep -qi '^GNU Make'
	# XXX - busybox wget from crosware appears to work fine
	# XXX - just verify it's available for now
	# XXX - DL_CMD defaults to "wget -c -O"
	# XXX - append --no-check-certificate to force cert acceptance?
	#wget --version | egrep -qi '(tls|ssl)'
	# change to "curl -k -C - -L -o" in config.mak.common to avoid wget completely
	# check left for posterity...
	which wget
	echo
	echo 'attempting to make directory $(CWSTATICINST)'
	echo 'if this fails, make sure you can write to $(CWSTATICINST) or its parent directory'
	mkdir -p $(CWSTATICINST) 
	echo
	echo 'if this fails, make sure you are running in a musl-cross-make git checkout'
	test -e $(CONFMAKDIST)
	echo

# $(CONFMAK) common toolchain options
$(CONFMAK).common: cleanconfs
	echo 'creating $@'
	echo -n > $@
	echo 'DL_CMD = curl -k -C - -L -o' >> $@
	echo 'TARGET = $(TRIPLET)' >> $@
	echo 'COMMON_CONFIG += CFLAGS="-fPIC -g0 -Os" CXXFLAGS="-fPIC -g0 -Os"' >> $@
	echo 'COMMON_CONFIG += --disable-nls' >> $@
	echo 'GCC_CONFIG += --enable-languages=c,c++' >> $@
	echo 'GCC_CONFIG += --disable-multilib' >> $@
	echo 'GCC_CONFIG += --disable-lto' >> $@
	#echo 'GCC_CONFIG += --with-pic' >> $@
	#echo 'GCC_CONFIG += --enable-cxx-flags=-fPIC' >> $@
	echo 'GCC_CONFIG += $(ARCH_GCC_CONFIG)' >> $@
	echo 'BINUTILS_CONFIG += --enable-install-libiberty' >> $@
	echo 'BINUTILS_CONFIG += --disable-lto' >> $@
	sort -o $@ $@

# temporary shared toolchain build config
$(CONFMAK).shared: $(CONFMAK).common
	echo 'creating $@'
	cat $< > $@
	echo 'COMMON_CONFIG += LDFLAGS="$(LDFLAGS) -s"' >> $@
	echo 'OUTPUT = $(TMPSHAREDDIR)' >> $@
	sort -o $@ $@

# final static toolchain build config
$(CONFMAK).static: $(CONFMAK).common
	echo 'creating $@'
	cat $< > $@
	echo 'COMMON_CONFIG += --enable-shared=no --disable-shared --enable-static=yes --enable-static' >> $@
	echo 'COMMON_CONFIG += LDFLAGS="$(LDFLAGS) -s --static"' >> $@
	echo 'COMMON_CONFIG += CC="$(TRIPLET)-gcc -static --static" CXX="$(TRIPLET)-g++ -static --static"' >> $@
	#echo 'COMMON_CONFIG += --build=$(TRIPLET)' >> $@
	#echo 'COMMON_CONFIG += --host=$(TRIPLET)' >> $@
	#echo 'COMMON_CONFIG += --target=$(TRIPLET)' >> $@
	echo 'OUTPUT = $(CWSTATICINST)' >> $@
	# XXX - need this? need libstdc++ compiled w/-fPIC, not sure how...
	echo 'GCC_CONFIG += --disable-host-shared' >> $@
	sort -o $@ $@

# custom ld.so path stuff
get_patches: remove_patches
	# XXX - change when default versions are updated
	# XXX - wget needs to be changed to whatever $(DL_CMD) is set to
	mkdir -p ./patches/gcc-$(GCCVER) || true
	wget -P ./patches/gcc-$(GCCVER)/ https://raw.githubusercontent.com/ryanwoodsmall/musl-misc/master/musl-cross-make-confs/patches/9999-crosware-ldso_gcc-$(GCCVER).diff
	mkdir -p ./patches/binutils-$(BINUTILSVER) || true
	wget -P ./patches/binutils-$(BINUTILSVER)/ https://raw.githubusercontent.com/ryanwoodsmall/musl-misc/master/musl-cross-make-confs/patches/9999-crosware-ldso_binutils-$(BINUTILSVER).diff
	# XXX - hackity hacky hack

remove_patches:
	rm -f ./patches/*/*crosware* || true

# build and install temporary shared toolchain
build_shared: $(CONFMAK).shared get_patches
	echo 'building temporary shared compiler'
	cat $< > $(CONFMAK)
	make clean || echo -n
	make
	make install
	make clean

# build and install final static toolchain
build_static: $(CONFMAK).static build_shared get_patches
	echo 'building final static compiler'
	hash -r
	cat $< > $(CONFMAK)
	make clean || echo -n
	make
	make install
	# XXX - need binutils/gmp/mpc/mpfr libs for self-hosting?
	# XXX - is this safe???
	# XXX - crosware has gmp, mpfr, mpc, binutils recipes now...
	#install -m 0644 ./build/local/$(TRIPLET)/obj_binutils/bfd/libbfd.a $(CWARCHLIBDIR)/
	#install -m 0644 ./build/local/$(TRIPLET)/obj_binutils/libiberty/libiberty.a $(CWARCHLIBDIR)/
	#install -m 0644 ./build/local/$(TRIPLET)/obj_binutils/opcodes/libopcodes.a $(CWARCHLIBDIR)/
	#install -m 0644 ./build/local/$(TRIPLET)/obj_gcc/gmp/.libs/libgmp.a $(CWARCHLIBDIR)/
	#install -m 0644 ./build/local/$(TRIPLET)/obj_gcc/mpc/src/.libs/libmpc.a $(CWARCHLIBDIR)/
	#install -m 0644 ./build/local/$(TRIPLET)/obj_gcc/mpfr/src/.libs/libmpfr.a $(CWARCHLIBDIR)/
	# XXX - reenable when things shake out
	#make clean

# create triplet-program symlinks to bare program
create_symlinks: build_static
	# XXX need $(TRIPLET)-${program} to ${program} symlinks for man pages
	echo 'creating symbolic links'
	cd $(CWSTATICINST)/bin ; for p in $(TRIPLET)-* ; do ln -sf $$p `echo $$p | sed s/$(TRIPLET)-//g` ; done
	cd $(CWSTATICINST)/bin ; for p in $(TRIPLET)-* ; do ln -sf $$p `echo $$p | sed s/$(TRIPLET)-/musl-/g` ; done
	cd $(CWARCHLIBDIR) ; for l in ld*.so* ; do ln -sf `pwd`/libc.so $$l ; done
	cd $(CWARCHLIBDIR) ; ln -sf `pwd`/libc.so ld.so
	cd $(CWARCHLIBDIR) ; ln -sf `pwd`/libc.so ldd
	cd $(CWARCHLIBDIR) ; ln -sf `pwd`/ldd $(CWSTATICINST)/bin/musl-ldd

# final tar and compress
archive_compiler: create_symlinks
	echo 'archiving static compiler'
	cd $(MUSLTOP) ; tar -cf $(CWSTATICTAR) $(CWSTATICDIR)
	bzip2 -9 $(CWSTATICTAR)
	echo
	echo 'static compiler archived to $(CWSTATICBZ2)'
	echo
